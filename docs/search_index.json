[["index.html", "Introduction au machine learning avec tidymodels Chapitre 1 Importation de Données 1.1 Chargement des librairies 1.2 importation des données 1.3 Visualisation des données", " Introduction au machine learning avec tidymodels Priestley Muhindo 2021-06-01 Chapitre 1 Importation de Données 1.1 Chargement des librairies 1.2 importation des données Les données des oursins issues dune expériaence au laboratoire Les données des oursins issues dune expérience au laboratoire 1.3 Visualisation des données On peut vite remarquer que que la différence se dégage entre les différents régimes alimentaires "],["régression-linéaire.html", "Chapitre 2 Régression Linéaire 2.1 Partitionnement 2.2 Exploration des estimateurs du modèle 2.3 Significativité globale du modèle 2.4 Mesure de limportance des prédicteurs dans la construction du modèle 2.5 La métrique RMSE 2.6 Qualité du modèle au test set", " Chapitre 2 Régression Linéaire 2.1 Partitionnement Nous allons utiliser un modèle linéaire avec variables qualitatives en mettant en exergue linterraction car nous avons à la fois un prédicteur continu et un prédicteur catégoriel. Étant donné que les pentes semblent être différentes pour au moins deux des régimes dalimentation, construisons un modèle qui permet des interactions bidirectionnelles. Spécifier une formule R avec nos variables de cette manière : Formule du modele et package 2.2 Exploration des estimateurs du modèle lm_fit &lt;- lm_mod %&gt;% fit(largeur~.,data = urchins_train_d) Affichons ces résultats sous forme de tiddy format: Faisons une simulation en prédisant la largeur pour un oursin ayant une taille de 2O ml ayant à létat initial un régime alimentaire initial,pauvre ou riche Voici quelques prévisions pour ce genre doursin Voici quelques prévisions pour ce genre doursin Visualisons les différences par un graphique de type dotcharts 2.3 Significativité globale du modèle Nous devons mesurer le niveau de prédiction de notre mod 2.4 Mesure de limportance des prédicteurs dans la construction du modèle La variable taille de lOursin contribue le plus dans la détermination du modèle 2.5 La métrique RMSE 2.6 Qualité du modèle au test set Ce modèle prédit dans la vraie vie seulement 30.8% des cas "],["travail-sous-un-workflow.html", "Chapitre 3 Travail sous un WorkFlow 3.1 Feauture Engeneering 3.2 SPécification du modèle 3.3 Création du workflow 3.4 Importance des prédicteurs", " Chapitre 3 Travail sous un WorkFlow Nous allons utiliser un autre dataset afin de mettre en oeuvre un flux de travail appelé workflow afin détablir un modèle en passant par du feature engineering set.seed(271) vente_maison &lt;- readRDS(&quot;vente_immeuble.rds&quot;) vente_maison &lt;- vente_maison %&gt;% select(-selling_date) vente_maison_split &lt;- vente_maison %&gt;% initial_split(strata = selling_price,prop = .75) maison_train &lt;- training(vente_maison_split) maison_test &lt;- testing(vente_maison_split) 3.1 Feauture Engeneering A ce niveau de débat ,nous allons préparer nos données en y appliquant certains transformeurs par exemple la normalisation ou la standardisation de variables quantitatives etc,limputation des données manquantes ou la conversion de certains facteurs en variables latentes ,etc.Pour accéder à ces transformeurs ,il faudra écrire une fonction step_ en ayant chargé au préalable la bibliothèque rsample du framework tidymodels. En ce qui nous concerne,nous allons développer un modèle de regression linéaire dont la variable explicative est selling_price en fonction des autres variables de la base de données . Nous allons ,pour ce faire,transformer tous les prédicteurs quantitatifs en variables normales puis en les centrant et en les réduisant;quant aux prédicteurs qualitatifs nominaux ,nous allons les transformer en variables factices. Finis de rigoler ,passons aux choses sérieuses maison_train_recipe &lt;- recipe(selling_price~.,data =maison_train ) %&gt;% step_YeoJohnson(all_numeric(),-all_outcomes()) %&gt;% step_normalize(all_numeric(),-all_outcomes()) %&gt;% step_dummy(all_nominal(),-all_outcomes()) Nous devons présentement configurer cette feauture engeneering et ladapter à nos données dentraînement (càd trainset) maison_train_recipe %&gt;% prep() %&gt;% bake(new_data=maison_test) %&gt;% datatable() Bingo!,nous venons de réaliser du feauture engeneering 3.2 SPécification du modèle A laide du package parsnip,nous allons définir notre modèle de regression linéaire: lm_model &lt;- linear_reg() %&gt;% set_engine(&quot;lm&quot;) %&gt;% set_mode(&quot;regression&quot;) 3.3 Création du workflow Nous allons enfin créer un flux de travail pour tidymodels maisons_workflow &lt;- workflow() %&gt;% add_model(lm_model) %&gt;% add_recipe(maison_train_recipe ) Nous allons finalement entraîner notre workflow maison_train_fit &lt;- maisons_workflow %&gt;% last_fit(split=vente_maison_split) Pour afficher les métriques ,nous allons utiliser la fonction collect_metrics maison_train_fit %&gt;% collect_metrics() %&gt;% datatable() Récupérons les valeurs prédites par notre modèle maison_train_fit %&gt;% collect_predictions() %&gt;% datatable() 3.4 Importance des prédicteurs maison_train_baked &lt;- maison_train_recipe %&gt;% prep() %&gt;% bake(new_data=maison_train) maison_train_baked %&gt;% datatable() "],["meilleurs-hyperparamètres.html", "Chapitre 4 Meilleurs hyperparamètres", " Chapitre 4 Meilleurs hyperparamètres "],["modélisation.html", "Modélisation", " Modélisation "]]
